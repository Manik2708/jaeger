// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	es "github.com/jaegertracing/jaeger/pkg/es"
	elastic "github.com/olivere/elastic"

	mock "github.com/stretchr/testify/mock"
)

// XPackIlmPutLifecycle is an autogenerated mock type for the XPackIlmPutLifecycle type
type XPackIlmPutLifecycle struct {
	mock.Mock
}

// BodyString provides a mock function with given fields: body
func (_m *XPackIlmPutLifecycle) BodyString(body string) es.XPackIlmPutLifecycle {
	ret := _m.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for BodyString")
	}

	var r0 es.XPackIlmPutLifecycle
	if rf, ok := ret.Get(0).(func(string) es.XPackIlmPutLifecycle); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.XPackIlmPutLifecycle)
		}
	}

	return r0
}

// Do provides a mock function with given fields: ctx
func (_m *XPackIlmPutLifecycle) Do(ctx context.Context) (*elastic.XPackIlmPutLifecycleResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *elastic.XPackIlmPutLifecycleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*elastic.XPackIlmPutLifecycleResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *elastic.XPackIlmPutLifecycleResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.XPackIlmPutLifecycleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Policy provides a mock function with given fields: policy
func (_m *XPackIlmPutLifecycle) Policy(policy string) es.XPackIlmPutLifecycle {
	ret := _m.Called(policy)

	if len(ret) == 0 {
		panic("no return value specified for Policy")
	}

	var r0 es.XPackIlmPutLifecycle
	if rf, ok := ret.Get(0).(func(string) es.XPackIlmPutLifecycle); ok {
		r0 = rf(policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.XPackIlmPutLifecycle)
		}
	}

	return r0
}

// NewXPackIlmPutLifecycle creates a new instance of XPackIlmPutLifecycle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXPackIlmPutLifecycle(t interface {
	mock.TestingT
	Cleanup(func())
}) *XPackIlmPutLifecycle {
	mock := &XPackIlmPutLifecycle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
